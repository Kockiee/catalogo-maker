'use client'
// Importa√ß√£o do componente para deletar conta
import DeleteAccountButton from "@/app/dashboard/account/components/DeleteAccountButton"
// Importa√ß√£o do contexto de autentica√ß√£o
import { useAuth } from "@/app/contexts/AuthContext"
// Importa√ß√£o da biblioteca moment para formata√ß√£o de datas
import moment from "moment-timezone"
// Importa√ß√£o do componente Button do Flowbite React
import { Button } from "flowbite-react"
// Importa√ß√£o do componente para copiar informa√ß√µes
import CopyButton from "@/app/dashboard/account/components/CopyButton"

/**
 * P√°gina de configura√ß√µes da conta do usu√°rio
 * Exibe informa√ß√µes pessoais, status da conta e op√ß√µes de gerenciamento
 * @returns {JSX.Element} Interface da p√°gina de conta
 */
export default function PAGE() {
  // Desestrutura√ß√£o dos dados e fun√ß√µes do contexto de autentica√ß√£o
  const { user, logout, DBUser } = useAuth()

  /**
   * Fun√ß√£o para lidar com o logout do usu√°rio
   * Executa a fun√ß√£o de logout do contexto de autentica√ß√£o
   */
  const handleSignOut = async() => {
    await logout();  // Chama a fun√ß√£o de logout
  };

  // Renderiza a interface da p√°gina de conta
  return (
    <div className="flex flex-col justify-center">
      {/* T√≠tulo de boas-vindas com nome do usu√°rio */}
      <h1 className="text-xl font-bold">Ol√° {DBUser ? DBUser.username : "..."}</h1>
      {/* Subt√≠tulo explicativo */}
      <h2>Aqui voc√™ encontra as informa√ß√µes completas da sua conta.</h2>

      {/* Grid responsivo com informa√ß√µes da conta */}
      <div className="grid grid-cols-2 max-sm:grid-cols-1 text-lg font-semibold">
        {/* S√≥ renderiza as informa√ß√µes se os dados estiverem carregados */}
        {DBUser && user && (
          <>
            {/* Lista de informa√ß√µes pessoais */}
            <ul>
              {/* Nome de usu√°rio com bot√£o de copiar */}
              <li className="py-2 flex flex-row items-center">
                <p>Nome de usu√°rio: {user.displayName}</p>
                <CopyButton toCopy={user.displayName} successMessage="Informa√ß√£o copiada !"/>
              </li>
              {/* Status de verifica√ß√£o do email */}
              <li className="py-2">
                Email verificado: {user.emailVerified ? "‚úÖ Verificado" : " ‚ùå N√£o verificado"}
              </li>
              {/* ID da conta com bot√£o de copiar (para suporte) */}
              <li className="break-words py-2 flex flex-row items-center">
                Id da conta (para suporte): <span className="break-all contents ">{user.uid}</span>
                <CopyButton toCopy={user.uid} successMessage="Informa√ß√£o copiada !"/>
              </li>
            </ul>

            {/* Lista de informa√ß√µes da conta */}
            <ul>
              {/* Email com bot√£o de copiar */}
              <li className="py-2 flex flex-row items-center">
                Seu email: {user.email}
                <CopyButton toCopy={user.email} successMessage="Informa√ß√£o copiada !"/>
              </li>
              {/* Data de cria√ß√£o da conta formatada */}
              <li className="py-2">
                Data de cria√ß√£o: {moment(user.metadata.creationTime).format('DD/MM/YYYY')}
              </li>
              {/* Status do plano premium */}
              <li className="py-2">
                Plano premium: {DBUser.premium ? "üëë Ativado" : "Desativado"}
              </li>
            </ul>
          </>
        )}
      </div>

      {/* Container dos bot√µes de a√ß√£o */}
      <div className="flex max-sm:w-full max-sm:space-x-0 max-sm:flex-col max-sm:space-y-2 space-x-2 mt-4">
        {/* Bot√£o de sair da conta */}
        <Button color="failure" className="duration-200" onClick={handleSignOut}>
          Sair da conta
        </Button>
        {/* Bot√£o para deletar conta */}
        <DeleteAccountButton/>
      </div>
    </div>
  )  
}